using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Media;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using System.IO;
using System.Reflection;

namespace DefinitelyNotMalware
{
    public partial class frm_DefNotMalware : Form
    {
        public frm_DefNotMalware()
        {
            InitializeComponent();
        }

        string input;
        string continue1;
        string allowClose;

        long CCNumber_Int;
        long SecurityC_Int;
        long ExpNumber_Int;

        int preventDialog = 0;

	// Planning on making this not closable by Task Manager sooner, it cannot be closed by the red X so far

        private void preventClosing() 
        {
            this.Closing += new CancelEventHandler(this.doNotClose); // Makes a new event to stop the program from closing
        }

        private void doNotClose(Object sender, CancelEventArgs e)
        {
             e.Cancel = true;
        }

        private void allowClosing()
        {
            this.Closing += new CancelEventHandler(this.doClose);
        }

        private void doClose(Object sender, CancelEventArgs e)
        {
            e.Cancel = false; // This will allow the form to close "false is actually a "true""
        }

        private void playShrekSound()
        {
            SoundPlayer shrekSound = new SoundPlayer(DefinitelyNotMalware.Resources.song);
            shrekSound.Play();
        }

        private void playSuccSound()
        {
            SoundPlayer succSound = new SoundPlayer(DefinitelyNotMalware.Resources.succ);
            succSound.Play();
        }

        private void frm_DefNotMalware_Load(object sender, EventArgs e)
        {
            playShrekSound();
            dontLetTaskManagerKillMe();
            preventClosing();
        }

        private void dontLetTaskManagerKillMe()
        {
            this.FormClosing += new FormClosingEventHandler(this.frm_DefNotMalware_FormClosing);
        }

        private void frm_DefNotMalware_FormClosing(object sender, FormClosingEventArgs e)
        {
             if (e.CloseReason == CloseReason.TaskManagerClosing)
             {
                 e.Cancel = true;
             }
        }

        private void eventAfterSubmit()
        {
            playShrekSound();
            takeActionOnBoxes(2);
            btnCredits.Enabled = true;
            lbl_Progress.Text = "You can leave now";
            allowClosing();
        }

        private void blankBoxMessage(int c)
        {
            switch (c)
            {
                case 1:
                    lbl_Progress.Text = "";
                    MessageBox.Show("Put something in here!", "Credit Card Number Error");
                    timeToStart.Stop();
                    break;

                case 2:
                    lbl_Progress.Text = "";
                    MessageBox.Show("Put something in here!", "Security Code Error");
                    timeToStart.Stop();
                    break;

                case 3:
                    lbl_Progress.Text = "";
                    MessageBox.Show("Put something in here!", "Expiration Date Error");
                    timeToStart.Stop();
                    break;
            }
        }

        private void takeActionOnBoxes(int a)
        {
            switch (a)
            {
                case 1:
                    txtCCNumber.Clear();
                    txtSecurityC.Clear();
                    txtExp.Clear();
                    break;

                case 2:
                    txtCCNumber.Show();
                    txtSecurityC.Show();
                    txtExp.Show();
                    break;

                case 3:
                    txtCCNumber.Hide();
                    txtSecurityC.Hide();
                    txtExp.Hide();
                    break;
            }
            
        }

        private void lbl_CCNumber_Click(object sender, EventArgs e)
        {
            MessageBox.Show("15 to 16 numbers (depending on card)", "Format for Credit Card");
        }

        private void lbl_securityCode_Click(object sender, EventArgs e)
        {
            MessageBox.Show("3 numbers (depending on card)", "Format for Security Code");
        }

        private void lbl_expirationDate_Click(object sender, EventArgs e)
        {
            MessageBox.Show("4 numbers (MMYY)", "Format for Expiration Date");
        }

        private void checkFormat(int b)
        {
            switch (b)
            {
                case 1:
                    lbl_Progress.Text = "";
                    txtCCNumber.Clear();
                    MessageBox.Show("You put letters or the number was not the correct length!", "Credit Card Number Format Error");
                    timeToStart.Stop();
                    break;

                case 2:
                    lbl_Progress.Text = "";
                    txtSecurityC.Clear();
                    MessageBox.Show("You put letters or the number was not the correct length!", "Security Code Number Format Error");
                    timeToStart.Stop();
                    break;

                case 3:
                    lbl_Progress.Text = "";
                    txtExp.Clear();
                    MessageBox.Show("You put letters or the number was not the correct length!", "Security Code Number Format Error");
                    timeToStart.Stop();
                    break;
            }
        }

        private void btn_sumbitData_Click(object sender, EventArgs e)
        {
            timeToStart.Start();

            string CCNumber = txtCCNumber.Text;
            string SecurityC = txtSecurityC.Text;
            string ExpNumber = txtExp.Text;

            try
            {
                if (txtCCNumber.Text == "" && txtSecurityC.Text == "" && txtExp.Text == "")
                {
                    lbl_Progress.Text = "";
                    MessageBox.Show("Don't leave these blank!", "All of these are blank.");
                    timeToStart.Stop();
                }

                else
                {
                    if (txtCCNumber.Text == "")
                    {
                        blankBoxMessage(1);
                    }

                    if (txtSecurityC.Text == "")
                    {
                        blankBoxMessage(2);
                    }

                    if (txtExp.Text == "")
                    {
                        blankBoxMessage(3);
                    }

                    switch (!(Int64.TryParse(CCNumber, out CCNumber_Int)))
                    {
                        case true:
                            checkFormat(1);
                            break;

                        case false:
                            switch (txtCCNumber.Text.ToString().Length < 15 || txtCCNumber.Text.ToString().Length > 16)
                            {
                                case true:
                                    checkFormat(1);
                                    break;
                            }
                            break;
                    }

                    switch (!(Int64.TryParse(SecurityC, out SecurityC_Int)))
                    {
                        case true:
                            checkFormat(2);
                            break;

                        case false:
                            switch (txtSecurityC.Text.ToString().Length < 3 || txtSecurityC.Text.ToString().Length > 3)
                            {
                                case true:
                                    checkFormat(2);
                                    break;
                            }
                            break;
                    }

                    switch (!(Int64.TryParse(ExpNumber, out ExpNumber_Int)))
                    {
                        case true:
                            checkFormat(3);
                            break;

                        case false:
                            switch (txtExp.Text.ToString().Length < 4 || txtExp.Text.ToString().Length > 4)
                            {
                                case true:
                                    checkFormat(3);
                                    break;
                            }
                            break;
                    }
                }
            }

            catch
            {
                MessageBox.Show("You put something that the system does not know", "Are you stupid?");
            }
        }

        private void timeToStart_Tick(object sender, EventArgs e)
        {
            if (txtCCNumber.Text == "" && txtSecurityC.Text == "" && txtExp.Text == "")
            {

            }

            else if (txtCCNumber.Text == "" || txtCCNumber.Text.ToString().Length > 16 || txtCCNumber.Text.ToString().Length < 15)
            {

            }

            else if (txtSecurityC.Text == "" || txtSecurityC.Text.ToString().Length > 3)
            {

            }

            else if (txtExp.Text == "" || txtExp.Text.ToString().Length > 5)
            {

            }

            else
            {
                prg_sendingDataBar.Increment(1);

                takeActionOnBoxes(3);

                if (input == "yes")
                {
                    // This "for" code allows the program to be shaked, once "yes" is received from the user and they send info
		    // It also appears to run on the Main thread for the program, 5 ms is a small number so there is no harm
                    for (int i = 0; i < 5; i++)
                    {
                        this.Left += 10;
                        System.Threading.Thread.Sleep(5);
                        this.Left -= 10;
                        System.Threading.Thread.Sleep(5);
                    }

                    progressBarTimedEvent();
                }

                // This portion does the same thing as above except it will not shake the program (this works in unison (does not reset))
                else
                {
                    progressBarTimedEvent();
                }
            }
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            this.input = Microsoft.VisualBasic.Interaction.InputBox("Do you want to enable shake? type 'yes' or 'no'", "Enable Shake? It will scare you", "");
        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {

            if (preventDialog == 0)
            {
                this.allowClose = Microsoft.VisualBasic.Interaction.InputBox("What is the password to close this madness?", "Enter Password", "");
            }

            if (allowClose != "SW420" || allowClose != "sw420")
            {
                switch (allowClose)
                {
                    case "sw420":
                        allowClosing();
                        btnCredits.Enabled = true;
                        preventDialog = 1;
                        lbl_Progress.Text = "You can leave now";
                        MessageBox.Show("You can now close the program and escape its grasp", "Congratulations");
                        break;

                    case "SW420":
                        allowClosing();
                        btnCredits.Enabled = true;
                        preventDialog = 1;
                        lbl_Progress.Text = "You can leave now";
                        MessageBox.Show("You can now close the program and escape its grasp", "Congratulations");
                        break;

                    default:
                        preventDialog = 0;
                        MessageBox.Show("Don't come back", "Notice");
                        break;

                }
            }
        }

        private void btnCredits_Click(object sender, EventArgs e)
        {
            switch (allowClose)
            {
                case "sw420":
                    MessageBox.Show("Created By DefyTheRush", "Credits");
                    break;

                case "SW420":
                    MessageBox.Show("Created by DefyTheRush", "Credits");
                    break;

                default:
                    MessageBox.Show("Created by someone", "Credits");
                    break;
            }
        }

        private void progressBarTimedEvent()
        {
            if (prg_sendingDataBar.Value <= 20)
            {
                lbl_Progress.Text = "Getting Information...";
            }

            if (prg_sendingDataBar.Value == 40)
            {
                lbl_Progress.Text = "Searching For Present...";
            }

            if (prg_sendingDataBar.Value == 60)
            {
                lbl_Progress.Text = "Sending Your Present...";
            }

            if (prg_sendingDataBar.Value == 80)
            {
                lbl_Progress.Text = "Finalizing...";
            }

            if (prg_sendingDataBar.Value == 100)
            {
                lbl_Progress.Text = "All Done! Enjoy!";
                prg_sendingDataBar.Value = 0;

                timeToStart.Stop();
                takeActionOnBoxes(1);

                playSuccSound();

                MessageBox.Show("Haha, you were bamboolzed, you SUCCCCCCCCCCC", "Get Rekt By Shrek");

                this.continue1 = Microsoft.VisualBasic.Interaction.InputBox("Do you want to look at it some more? type 'yes' or 'no' (clicking 'cancel' or the red 'X' means 'yes')", "Try it again?", "");

                switch (continue1)
                {
                    case "yes":
                        eventAfterSubmit();
                        break;

                    case "no":
                        Application.Exit();
                        break;

                    default:
                        eventAfterSubmit();
                        break;
                }
            }
        }
    }
}
